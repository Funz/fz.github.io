{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FZ - Parametric Scientific Computing Framework","text":"<p>A powerful Python package for parametric simulations and computational experiments. FZ wraps your simulation codes to automatically run parametric studies, manage input/output files, handle parallel execution, and collect results in structured DataFrames.</p>"},{"location":"#what-is-fz","title":"What is FZ?","text":"<p>FZ is a framework that simplifies running parametric computational studies. Whether you're working with scientific simulations, engineering calculations, or any computational model, FZ helps you:</p> <ul> <li>\ud83d\udd04 Run parametric studies - Automatically generate and execute all combinations of parameter values</li> <li>\u26a1 Parallelize execution - Run multiple cases concurrently across multiple calculators</li> <li>\ud83d\udcbe Cache results - Reuse previous calculations based on input file hashes</li> <li>\ud83c\udf10 Execute remotely - Run calculations on remote servers via SSH</li> <li>\ud83d\udcca Structure output - Get results as pandas DataFrames with automatic type conversion</li> </ul>"},{"location":"#four-core-functions","title":"Four Core Functions","text":"<p>FZ provides four fundamental functions that cover the entire workflow:</p> Function Purpose Description fzi Parse Input Identify variables in input files fzc Compile Substitute variable values in templates fzo Parse Output Extract results from output files fzr Run Execute complete parametric studies"},{"location":"#quick-example","title":"Quick Example","text":"<p>Here's a simple parametric study in just a few lines:</p> <pre><code>import fz\n\n# Define the model\nmodel = {\n    \"varprefix\": \"$\",\n    \"output\": {\n        \"pressure\": \"grep 'pressure = ' output.txt | awk '{print $3}'\"\n    }\n}\n\n# Run all combinations (4 \u00d7 3 = 12 cases)\nresults = fz.fzr(\n    \"input.txt\",\n    {\n        \"T_celsius\": [10, 20, 30, 40],  # 4 temperatures\n        \"V_L\": [1, 2, 5],                # 3 volumes\n        \"n_mol\": 1.0                     # fixed amount\n    },\n    model,\n    calculators=\"sh://bash calculate.sh\",\n    results_dir=\"results\"\n)\n\nprint(results)  # pandas DataFrame with all results\n</code></pre>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#parametric-studies","title":"Parametric Studies","text":"<p>Generate and run all combinations of parameter values automatically. FZ creates the Cartesian product of your parameter lists and manages execution.</p>"},{"location":"#multiple-calculators","title":"Multiple Calculators","text":"<p>Execute calculations using different methods:</p> <ul> <li>Local shell - Run scripts and executables locally</li> <li>SSH remote - Execute on remote servers with automatic file transfer</li> <li>Cache - Reuse previous results based on input hashes</li> </ul>"},{"location":"#smart-parallel-execution","title":"Smart Parallel Execution","text":"<p>FZ automatically parallelizes your calculations across available calculators with:</p> <ul> <li>Load balancing</li> <li>Automatic retry on failures</li> <li>Progress tracking with ETA</li> <li>Graceful interrupt handling (Ctrl+C)</li> </ul>"},{"location":"#formula-evaluation","title":"Formula Evaluation","text":"<p>Use Python or R expressions directly in input templates for calculated parameters:</p> <pre><code>Temperature: $T_celsius C\n# Calculated value\nT_kelvin: @($T_celsius + 273.15) K\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Ready to get started? Check out our guides:</p>   -   :material-rocket-launch:{ .lg .middle } __Quick Start__      ---      Get up and running with FZ in minutes      [:octicons-arrow-right-24: Quick Start](getting-started/quickstart.md)  -   :material-book-open-variant:{ .lg .middle } __User Guide__      ---      Learn about core functions, models, and calculators      [:octicons-arrow-right-24: User Guide](user-guide/core-functions/fzi.md)  -   :material-puzzle:{ .lg .middle } __Plugins__      ---      Explore FZ plugins for specific simulation codes      [:octicons-arrow-right-24: Plugins](plugins/index.md)  -   :material-code-braces:{ .lg .middle } __Examples__      ---      See FZ in action with complete examples and Google Colab notebooks      [:octicons-arrow-right-24: Examples](examples/perfectgas.md)"},{"location":"#plugins","title":"Plugins","text":"<p>FZ includes plugins for various simulation codes:</p> <ul> <li>FZ-Moret - Moret model plugin</li> <li>FZ-MCNP - Monte Carlo N-Particle Transport Code</li> <li>FZ-Cathare - Thermal-hydraulic system code</li> <li>FZ-Cristal - Cristal simulation plugin</li> <li>FZ-Scale - Scale nuclear analysis code</li> <li>FZ-Telemac - Hydrodynamics simulation system</li> </ul>"},{"location":"#google-colab-integration","title":"Google Colab Integration","text":"<p>Try FZ directly in your browser with our Google Colab notebooks:</p> <ul> <li>Basic Example - Perfect Gas</li> <li>OpenModelica Integration</li> <li>Plugin Examples</li> </ul>"},{"location":"#use-cases","title":"Use Cases","text":"<p>FZ is perfect for:</p> <ul> <li>Sensitivity Analysis - Understand how parameters affect your results</li> <li>Design of Experiments - Systematically explore the parameter space</li> <li>Optimization Studies - Find optimal parameter combinations</li> <li>Uncertainty Quantification - Propagate uncertainties through your model</li> <li>Model Validation - Compare model outputs against experimental data</li> </ul>"},{"location":"#community-and-support","title":"Community and Support","text":"<ul> <li>GitHub: Funz/fz</li> <li>Issues: Report bugs or request features</li> <li>Documentation: You're reading it!</li> </ul>"},{"location":"#license","title":"License","text":"<p>FZ is released under the BSD 3-Clause License.</p>"},{"location":"#citation","title":"Citation","text":"<p>If you use FZ in your research, please cite:</p> <pre><code>@software{fz,\n  title = {FZ: Parametric Scientific Computing Framework},\n  designers = {[Yann Richet]},\n  authors = {[Claude Sonnet, Yann Richet]},\n  year = {2025},\n  url = {https://github.com/Funz/fz}\n}\n</code></pre>"},{"location":"contributing/development/","title":"Development","text":"<p>Contributing to FZ. See the main FZ documentation for complete details.</p>"},{"location":"contributing/testing/","title":"Testing","text":"<p>Running FZ tests. See the main FZ documentation for complete details.</p>"},{"location":"examples/colab/","title":"Google Colab Notebooks","text":"<p>Run FZ examples directly in your browser with Google Colab - no installation required!</p>"},{"location":"examples/colab/#what-is-google-colab","title":"What is Google Colab?","text":"<p>Google Colab is a free cloud-based Jupyter notebook environment. It's perfect for trying FZ without setting up a local environment.</p>"},{"location":"examples/colab/#available-notebooks","title":"Available Notebooks","text":""},{"location":"examples/colab/#1-perfect-gas-example","title":"1. Perfect Gas Example","text":"<p>Learn FZ basics with the ideal gas law.</p> <p></p> <p>What you'll learn:</p> <ul> <li>Installing FZ in Colab</li> <li>Creating input templates with variables and formulas</li> <li>Running parametric studies</li> <li>Analyzing results with pandas</li> <li>Visualizing with matplotlib</li> </ul>"},{"location":"examples/colab/#2-openmodelica-integration","title":"2. OpenModelica Integration","text":"<p>Use FZ with OpenModelica for dynamic system simulations.</p> <p></p> <p>What you'll learn:</p> <ul> <li>Installing OpenModelica in Colab</li> <li>Creating Modelica models</li> <li>Parametric simulation with FZ</li> <li>Analyzing dynamic system responses</li> </ul> <p>Example model:</p> <pre><code>model SimpleOscillator\n  parameter Real omega = $omega;  // Natural frequency\n  parameter Real zeta = $zeta;    // Damping ratio\n\n  Real x(start=1.0);  // Position\n  Real v(start=0.0);  // Velocity\n\nequation\n  der(x) = v;\n  der(v) = -omega^2 * x - 2*zeta*omega*v;\nend SimpleOscillator;\n</code></pre>"},{"location":"examples/colab/#3-mcnp-plugin-example","title":"3. MCNP Plugin Example","text":"<p>Monte Carlo radiation transport with FZ-MCNP.</p> <p></p> <p>Prerequisites:</p> <ul> <li>MCNP license (demo uses simplified examples)</li> </ul> <p>What you'll learn:</p> <ul> <li>Installing FZ-MCNP plugin</li> <li>Setting up MCNP input files</li> <li>Running parametric studies for shielding analysis</li> <li>Extracting tallies and analyzing results</li> </ul>"},{"location":"examples/colab/#4-parallel-processing-demo","title":"4. Parallel Processing Demo","text":"<p>Understand FZ's parallel execution capabilities.</p> <p></p> <p>What you'll learn:</p> <ul> <li>Configuring multiple calculators</li> <li>Load balancing</li> <li>Performance comparison: serial vs parallel</li> <li>Monitoring execution</li> </ul>"},{"location":"examples/colab/#5-caching-and-resume","title":"5. Caching and Resume","text":"<p>Learn to reuse results and resume interrupted studies.</p> <p></p> <p>What you'll learn:</p> <ul> <li>How FZ caching works</li> <li>Setting up cache calculators</li> <li>Resuming interrupted runs</li> <li>Extending previous studies</li> </ul>"},{"location":"examples/colab/#creating-your-own-colab-notebook","title":"Creating Your Own Colab Notebook","text":""},{"location":"examples/colab/#step-1-install-fz","title":"Step 1: Install FZ","text":"<p>Add this cell at the beginning:</p> <pre><code>!pip install git+https://github.com/Funz/fz.git\n</code></pre> <p>For plugins:</p> <pre><code>!pip install git+https://github.com/Funz/fz-moret.git\n</code></pre>"},{"location":"examples/colab/#step-2-install-dependencies","title":"Step 2: Install Dependencies","text":"<pre><code># For OpenModelica\n!apt-get update\n!apt-get install -y omc\n\n# For visualization\n!pip install matplotlib seaborn pandas\n</code></pre>"},{"location":"examples/colab/#step-3-create-input-files","title":"Step 3: Create Input Files","text":"<pre><code>%%writefile input.txt\n# Your input template\ntemperature = $temp\npressure = $press\n</code></pre>"},{"location":"examples/colab/#step-4-create-calculation-script","title":"Step 4: Create Calculation Script","text":"<pre><code>%%writefile calculate.sh\n#!/bin/bash\nsource $1\n# Your calculation\necho \"result = $temp\" &gt; output.txt\n\n!chmod +x calculate.sh\n</code></pre>"},{"location":"examples/colab/#step-5-run-fz","title":"Step 5: Run FZ","text":"<pre><code>import fz\n\nmodel = {\n    \"varprefix\": \"$\",\n    \"output\": {\"result\": \"grep 'result = ' output.txt | awk '{print $3}'\"}\n}\n\nresults = fz.fzr(\n    \"input.txt\",\n    {\"temp\": [100, 200, 300]},\n    model,\n    calculators=\"sh://bash calculate.sh\",\n    results_dir=\"results\"\n)\n\nprint(results)\n</code></pre>"},{"location":"examples/colab/#openmodelica-example","title":"OpenModelica Example","text":"<p>Complete notebook for dynamic system simulations:</p> <pre><code># Install OpenModelica\n!apt-get update -qq\n!apt-get install -y omc\n\n# Install FZ\n!pip install git+https://github.com/Funz/fz.git\n\n# Create Modelica model\n%%writefile Oscillator.mo\nmodel Oscillator\n  parameter Real omega = $omega;  // Natural frequency\n  parameter Real zeta = $zeta;    // Damping ratio\n\n  Real x(start=1.0);\n  Real v(start=0.0);\n\nequation\n  der(x) = v;\n  der(v) = -omega^2 * x - 2*zeta*omega*v;\nend Oscillator;\n\n# Create simulation script\n%%writefile simulate.sh\n#!/bin/bash\n\n# Compile Modelica model\nomc -s Oscillator.mo\n\n# Run simulation\n./Oscillator -override omega=$omega,zeta=$zeta -r=result.mat\n\n# Extract peak overshoot\npython3 &lt;&lt; EOF\nimport scipy.io\nmat = scipy.io.loadmat('result.mat')\nx = mat['data_2'][0]  # Position data\npeak = max(abs(x))\nprint(f\"peak_overshoot = {peak}\")\nEOF\n\n!chmod +x simulate.sh\n\n# Define FZ model\nimport fz\n\nmodel = {\n    \"varprefix\": \"$\",\n    \"output\": {\n        \"peak_overshoot\": \"grep 'peak_overshoot = ' stdout | awk '{print $3}'\"\n    }\n}\n\n# Run parametric study\nresults = fz.fzr(\n    \"Oscillator.mo\",\n    {\n        \"omega\": [1, 2, 5, 10],      # 4 frequencies\n        \"zeta\": [0.1, 0.3, 0.7, 1.0] # 4 damping ratios\n    },\n    model,\n    calculators=\"sh://bash simulate.sh\",\n    results_dir=\"oscillator_results\"\n)\n\n# Visualize\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\npivot = results.pivot(index='zeta', columns='omega', values='peak_overshoot')\nsns.heatmap(pivot, annot=True, fmt='.2f', cmap='RdYlGn_r')\nplt.title('Peak Overshoot: Damping vs Frequency')\nplt.show()\n</code></pre>"},{"location":"examples/colab/#plugins-in-colab","title":"Plugins in Colab","text":""},{"location":"examples/colab/#installing-plugins","title":"Installing Plugins","text":"<pre><code># Install base FZ\n!pip install git+https://github.com/Funz/fz.git\n\n# Install plugins\n!pip install git+https://github.com/Funz/fz-moret.git\n!pip install git+https://github.com/Funz/fz-mcnp.git\n# etc.\n</code></pre>"},{"location":"examples/colab/#using-plugin-models","title":"Using Plugin Models","text":"<pre><code>from fz_moret import get_model\n\n# Use plugin model\nmodel = get_model('moret')\n\nresults = fz.fzr(\n    \"input.txt\",\n    variables,\n    model,\n    calculators=\"sh://bash run_moret.sh\"\n)\n</code></pre>"},{"location":"examples/colab/#accessing-files-in-colab","title":"Accessing Files in Colab","text":""},{"location":"examples/colab/#upload-files","title":"Upload Files","text":"<pre><code>from google.colab import files\n\n# Upload input files\nuploaded = files.upload()\n# Select files from your computer\n</code></pre>"},{"location":"examples/colab/#download-results","title":"Download Results","text":"<pre><code># Download results CSV\nresults.to_csv('results.csv', index=False)\nfiles.download('results.csv')\n\n# Download all results directory\n!zip -r results.zip results/\nfiles.download('results.zip')\n</code></pre>"},{"location":"examples/colab/#mount-google-drive","title":"Mount Google Drive","text":"<pre><code>from google.colab import drive\ndrive.mount('/content/drive')\n\n# Save to Drive\nresults.to_csv('/content/drive/MyDrive/fz_results.csv', index=False)\n\n# Load from Drive\nimport fz\nresults = fz.fzo('/content/drive/MyDrive/previous_results', model)\n</code></pre>"},{"location":"examples/colab/#tips-for-colab","title":"Tips for Colab","text":""},{"location":"examples/colab/#1-session-timeout","title":"1. Session Timeout","text":"<p>Colab sessions timeout after inactivity. For long runs:</p> <pre><code># Keep session alive\nfrom google.colab import output\noutput.no_vertical_scroll()\n\n# Save checkpoints\nfor i in range(0, len(all_cases), 10):\n    batch = all_cases[i:i+10]\n    results = fz.fzr(...)\n    results.to_csv(f'checkpoint_{i}.csv')\n</code></pre>"},{"location":"examples/colab/#2-gputpu-not-needed","title":"2. GPU/TPU Not Needed","text":"<p>FZ doesn't use GPU/TPU. Use default runtime:</p> <pre><code>Runtime \u2192 Change runtime type \u2192 Hardware accelerator: None\n</code></pre>"},{"location":"examples/colab/#3-install-system-packages","title":"3. Install System Packages","text":"<pre><code># Install bc for calculations\n!apt-get install -y bc\n\n# Install simulation tools\n!apt-get install -y modelica\n</code></pre>"},{"location":"examples/colab/#4-debugging","title":"4. Debugging","text":"<p>Enable debug logging:</p> <pre><code>import os\nos.environ['FZ_LOG_LEVEL'] = 'DEBUG'\n</code></pre> <p>View execution logs:</p> <pre><code>!cat results/case1/log.txt\n</code></pre>"},{"location":"examples/colab/#sharing-your-notebook","title":"Sharing Your Notebook","text":"<ol> <li>Save to GitHub:</li> <li>File \u2192 Save a copy in GitHub</li> <li> <p>Choose your repository</p> </li> <li> <p>Get Colab Link:    <pre><code>https://colab.research.google.com/github/username/repo/blob/main/notebook.ipynb\n</code></pre></p> </li> <li> <p>Add Badge to README:    <pre><code>[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/username/repo/blob/main/notebook.ipynb)\n</code></pre></p> </li> </ol>"},{"location":"examples/colab/#example-notebooks-repository","title":"Example Notebooks Repository","text":"<p>All example notebooks are available at:</p> <p>https://github.com/Funz/fz-notebooks</p> <p>Clone to customize:</p> <pre><code>git clone https://github.com/Funz/fz-notebooks.git\n</code></pre>"},{"location":"examples/colab/#next-steps","title":"Next Steps","text":"<ul> <li>Perfect Gas Example - Detailed walkthrough</li> <li>Modelica Integration - Dynamic systems</li> <li>Plugins - Explore available plugins</li> <li>User Guide - Deep dive into FZ</li> </ul>"},{"location":"examples/hpc/","title":"Remote HPC Example","text":"<p>Execute FZ calculations on HPC clusters via SSH.</p>"},{"location":"examples/hpc/#example","title":"Example","text":"<pre><code>import fz\n\nresults = fz.fzr(\n    \"input.txt\",\n    variables,\n    model,\n    calculators=\"ssh://user@cluster.edu/bash /path/to/script.sh\",\n    results_dir=\"hpc_results\"\n)\n</code></pre> <p>See the main FZ documentation for complete details.</p>"},{"location":"examples/modelica/","title":"Modelica/OpenModelica Integration","text":"<p>Use FZ with OpenModelica for dynamic system simulations.</p>"},{"location":"examples/modelica/#installation","title":"Installation","text":"<pre><code># Install OpenModelica\nsudo apt-get install omc\n\n# Install FZ\npip install git+https://github.com/Funz/fz.git\n</code></pre>"},{"location":"examples/modelica/#example-model","title":"Example Model","text":"<p>See the Google Colab notebook for a complete working example.</p>"},{"location":"examples/modelica/#repository","title":"Repository","text":"<p>OpenModelica</p>"},{"location":"examples/perfectgas/","title":"Perfect Gas Pressure Example","text":"<p>This comprehensive example demonstrates a complete parametric study using the ideal gas law. We'll calculate pressure for various combinations of temperature, volume, and amount of gas.</p>"},{"location":"examples/perfectgas/#the-ideal-gas-law","title":"The Ideal Gas Law","text":"<p>The ideal gas law relates pressure, volume, temperature, and amount of gas:</p> \\[PV = nRT\\] <p>Where:</p> <ul> <li>P = Pressure (Pa)</li> <li>V = Volume (m\u00b3)</li> <li>n = Amount of substance (mol)</li> <li>R = Gas constant = 8.314 J/(mol\u00b7K)</li> <li>T = Temperature (K)</li> </ul>"},{"location":"examples/perfectgas/#project-structure","title":"Project Structure","text":"<pre><code>perfectgas/\n\u251c\u2500\u2500 input.txt           # Input template\n\u251c\u2500\u2500 calculate.sh        # Calculation script\n\u2514\u2500\u2500 run_study.py        # Python orchestration\n</code></pre>"},{"location":"examples/perfectgas/#step-1-input-template","title":"Step 1: Input Template","text":"<p>Create <code>input.txt</code> with variables and formulas:</p> <pre><code># input file for Perfect Gas Pressure, with variables n_mol, T_celsius, V_L\nn_mol=$n_mol\nT_kelvin=@($T_celsius + 273.15)\n\n#@ def L_to_m3(L):\n#@     return(L / 1000)\nV_m3=@(L_to_m3($V_L))\n</code></pre> <p>Key features:</p> <ul> <li>Variables: <code>$n_mol</code>, <code>$T_celsius</code>, <code>$V_L</code></li> <li>Formulas: Convert Celsius to Kelvin, Liters to m\u00b3</li> <li>Functions: <code>L_to_m3()</code> for unit conversion</li> </ul>"},{"location":"examples/perfectgas/#step-2-calculation-script","title":"Step 2: Calculation Script","text":"<p>Create <code>calculate.sh</code>:</p> <pre><code>#!/bin/bash\n\n# Read input file\nsource $1\n\n# Simulate calculation time\nsleep 1\n\n# Calculate pressure using ideal gas law\n# P = nRT/V where R = 8.314 J/(mol\u00b7K)\npressure=$(echo \"scale=4; $n_mol * 8.314 * $T_kelvin / $V_m3\" | bc)\n\n# Write output\necho \"pressure = $pressure\" &gt; output.txt\necho \"Temperature: $T_celsius \u00b0C ($T_kelvin K)\" &gt;&gt; output.txt\necho \"Volume: $V_L L ($V_m3 m\u00b3)\" &gt;&gt; output.txt\necho \"Amount: $n_mol mol\" &gt;&gt; output.txt\n\necho \"Calculation complete\"\n</code></pre> <p>Make executable:</p> <pre><code>chmod +x calculate.sh\n</code></pre>"},{"location":"examples/perfectgas/#step-3-run-parametric-study","title":"Step 3: Run Parametric Study","text":"<p>Create <code>run_study.py</code>:</p> <pre><code>import fz\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Define the model\nmodel = {\n    \"varprefix\": \"$\",\n    \"formulaprefix\": \"@\",\n    \"delim\": \"()\",\n    \"commentline\": \"#\",\n    \"output\": {\n        \"pressure\": \"grep 'pressure = ' output.txt | awk '{print $3}'\"\n    }\n}\n\n# Define parameter space\ninput_variables = {\n    \"n_mol\": [1, 2, 3],              # 3 amounts\n    \"T_celsius\": [0, 10, 20, 30, 40], # 5 temperatures\n    \"V_L\": [1, 2, 5, 10]              # 4 volumes\n}\n\n# Total cases: 3 \u00d7 5 \u00d7 4 = 60\n\n# Run parametric study\nresults = fz.fzr(\n    \"input.txt\",\n    input_variables,\n    model,\n    calculators=\"sh://bash calculate.sh\",\n    results_dir=\"results\"\n)\n\n# Display summary\nprint(f\"\\nCompleted {len(results)} calculations\")\nprint(f\"\\nResults summary:\")\nprint(results.describe())\n\n# Save results\nresults.to_csv(\"perfectgas_results.csv\", index=False)\nprint(f\"\\nResults saved to perfectgas_results.csv\")\n</code></pre>"},{"location":"examples/perfectgas/#step-4-execute","title":"Step 4: Execute","text":"<p>Run the study:</p> <pre><code>python run_study.py\n</code></pre>"},{"location":"examples/perfectgas/#results-analysis","title":"Results Analysis","text":""},{"location":"examples/perfectgas/#view-results","title":"View Results","text":"<pre><code>import pandas as pd\n\n# Load results\nresults = pd.read_csv(\"perfectgas_results.csv\")\n\n# Show first few rows\nprint(results.head())\n\n# Filter high pressure cases\nhigh_pressure = results[results['pressure'] &gt; 10000]\nprint(f\"\\nHigh pressure cases: {len(high_pressure)}\")\n</code></pre>"},{"location":"examples/perfectgas/#statistical-analysis","title":"Statistical Analysis","text":"<pre><code># Group by amount of gas\nby_amount = results.groupby('n_mol').agg({\n    'pressure': ['mean', 'std', 'min', 'max']\n})\nprint(\"\\nPressure statistics by amount:\")\nprint(by_amount)\n\n# Correlation analysis\nprint(\"\\nCorrelation matrix:\")\nprint(results[['n_mol', 'T_celsius', 'V_L', 'pressure']].corr())\n</code></pre>"},{"location":"examples/perfectgas/#visualization","title":"Visualization","text":""},{"location":"examples/perfectgas/#pressure-vs-temperature","title":"Pressure vs Temperature","text":"<pre><code>import matplotlib.pyplot as plt\n\nfig, axes = plt.subplots(1, 2, figsize=(15, 5))\n\n# Plot 1: Different volumes\nax = axes[0]\nfor volume in sorted(results['V_L'].unique()):\n    for n in sorted(results['n_mol'].unique()):\n        data = results[(results['V_L'] == volume) &amp; (results['n_mol'] == n)]\n        ax.plot(data['T_celsius'], data['pressure'],\n                marker='o', label=f'n={n} mol, V={volume} L')\n\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Pressure (Pa)')\nax.set_title('Ideal Gas: Pressure vs Temperature')\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nax.grid(True)\n\n# Plot 2: 3D surface for fixed n=1\nax = axes[1]\nfrom mpl_toolkits.mplot3d import Axes3D\nax = plt.subplot(122, projection='3d')\n\ndata_n1 = results[results['n_mol'] == 1]\nax.scatter(data_n1['T_celsius'], data_n1['V_L'], data_n1['pressure'],\n           c=data_n1['pressure'], cmap='viridis')\nax.set_xlabel('Temperature (\u00b0C)')\nax.set_ylabel('Volume (L)')\nax.set_zlabel('Pressure (Pa)')\nax.set_title('Pressure Surface (n=1 mol)')\n\nplt.tight_layout()\nplt.savefig('perfectgas_analysis.png', dpi=150, bbox_inches='tight')\nprint(\"Visualization saved to perfectgas_analysis.png\")\n</code></pre>"},{"location":"examples/perfectgas/#heatmap","title":"Heatmap","text":"<pre><code>import seaborn as sns\n\n# Create pivot table for n=1 mol\npivot_data = results[results['n_mol'] == 1].pivot(\n    index='V_L', columns='T_celsius', values='pressure'\n)\n\nplt.figure(figsize=(10, 6))\nsns.heatmap(pivot_data, annot=True, fmt='.0f', cmap='RdYlBu_r')\nplt.title('Pressure Heatmap (n=1 mol)')\nplt.xlabel('Temperature (\u00b0C)')\nplt.ylabel('Volume (L)')\nplt.savefig('perfectgas_heatmap.png', dpi=150, bbox_inches='tight')\n</code></pre>"},{"location":"examples/perfectgas/#advanced-parallel-execution","title":"Advanced: Parallel Execution","text":"<p>Run with 4 parallel workers:</p> <pre><code>results = fz.fzr(\n    \"input.txt\",\n    input_variables,\n    model,\n    calculators=[\n        \"sh://bash calculate.sh\",\n        \"sh://bash calculate.sh\",\n        \"sh://bash calculate.sh\",\n        \"sh://bash calculate.sh\"\n    ],\n    results_dir=\"results_parallel\"\n)\n</code></pre>"},{"location":"examples/perfectgas/#advanced-remote-execution","title":"Advanced: Remote Execution","text":"<p>Run on an HPC cluster:</p> <pre><code>results = fz.fzr(\n    \"input.txt\",\n    input_variables,\n    model,\n    calculators=\"ssh://user@cluster.edu/bash /path/to/calculate.sh\",\n    results_dir=\"results_remote\"\n)\n</code></pre>"},{"location":"examples/perfectgas/#advanced-caching","title":"Advanced: Caching","text":"<p>Resume or extend a previous study:</p> <pre><code># Extend to more cases\nextended_variables = {\n    \"n_mol\": [1, 2, 3, 4, 5],        # Added 4 and 5\n    \"T_celsius\": [0, 10, 20, 30, 40],\n    \"V_L\": [1, 2, 5, 10]\n}\n\n# Reuse previous results, only calculate new cases\nresults = fz.fzr(\n    \"input.txt\",\n    extended_variables,\n    model,\n    calculators=[\n        \"cache://results\",           # Check cache first\n        \"sh://bash calculate.sh\"     # Only run new cases\n    ],\n    results_dir=\"results_extended\"\n)\n</code></pre>"},{"location":"examples/perfectgas/#google-colab-version","title":"Google Colab Version","text":"<p>Try this example in Google Colab without any local installation:</p> <p></p> <p>The notebook includes:</p> <ul> <li>Automatic FZ installation</li> <li>Complete working example</li> <li>Interactive visualization</li> <li>Downloadable results</li> </ul>"},{"location":"examples/perfectgas/#validation","title":"Validation","text":"<p>Verify results against theoretical values:</p> <pre><code>import numpy as np\n\ndef ideal_gas_pressure(n, T_celsius, V_L):\n    \"\"\"Calculate pressure using ideal gas law\"\"\"\n    R = 8.314  # J/(mol\u00b7K)\n    T_kelvin = T_celsius + 273.15\n    V_m3 = V_L / 1000\n    return n * R * T_kelvin / V_m3\n\n# Compare with simulation\nfor _, row in results.head().iterrows():\n    expected = ideal_gas_pressure(row['n_mol'], row['T_celsius'], row['V_L'])\n    actual = row['pressure']\n    error = abs(expected - actual) / expected * 100\n    print(f\"n={row['n_mol']}, T={row['T_celsius']}, V={row['V_L']}: \"\n          f\"Expected={expected:.2f}, Actual={actual:.2f}, Error={error:.3f}%\")\n</code></pre>"},{"location":"examples/perfectgas/#complete-working-example","title":"Complete Working Example","text":"<p>Download all files:</p> <ul> <li>input.txt</li> <li>calculate.sh</li> <li>run_study.py</li> </ul> <p>Or clone the examples:</p> <pre><code>git clone https://github.com/Funz/fz.git\ncd fz/examples/perfectgas\npython run_study.py\n</code></pre>"},{"location":"examples/perfectgas/#next-steps","title":"Next Steps","text":"<ul> <li>Modelica Example - OpenModelica integration</li> <li>HPC Example - Remote cluster execution</li> <li>Advanced Features - Master parallel execution</li> <li>Plugins - Explore FZ plugins</li> </ul>"},{"location":"getting-started/concepts/","title":"Core Concepts","text":"<p>Understanding these fundamental concepts will help you use FZ effectively.</p>"},{"location":"getting-started/concepts/#the-fz-workflow","title":"The FZ Workflow","text":"<p>FZ follows a simple four-step workflow:</p> <pre><code>graph LR\n    A[Input Template] --&gt;|fzi| B[Parse Variables]\n    B --&gt;|fzc| C[Compile Cases]\n    C --&gt;|Calculator| D[Execute]\n    D --&gt;|fzo| E[Parse Results]\n\n    style A fill:#e1f5fe\n    style E fill:#c8e6c9\n</code></pre> <ol> <li>Parse - Identify variables in input templates</li> <li>Compile - Substitute values and evaluate formulas</li> <li>Execute - Run calculations</li> <li>Parse - Extract results</li> </ol> <p>The <code>fzr</code> function orchestrates all four steps automatically.</p>"},{"location":"getting-started/concepts/#variables","title":"Variables","text":"<p>Variables are placeholders in input templates that get replaced with actual values.</p>"},{"location":"getting-started/concepts/#variable-syntax","title":"Variable Syntax","text":"<pre><code>temperature = $temp\npressure = $press\nconcentration = $conc\n</code></pre> <p>The <code>$</code> prefix marks a variable (customizable via <code>varprefix</code>).</p>"},{"location":"getting-started/concepts/#variable-types","title":"Variable Types","text":"<p>FZ supports scalar and list values:</p> <pre><code># Scalar variable (single value)\n{\"temperature\": 100}\n\n# List variable (multiple values)\n{\"temperature\": [100, 200, 300]}\n\n# Mixed\n{\n    \"temperature\": [100, 200, 300],  # 3 cases\n    \"pressure\": 1.0                   # Fixed\n}\n</code></pre>"},{"location":"getting-started/concepts/#parametric-studies","title":"Parametric Studies","text":"<p>When you provide lists of values, FZ creates the Cartesian product:</p> <pre><code>input_variables = {\n    \"temp\": [10, 20],      # 2 values\n    \"volume\": [1, 2, 3],   # 3 values\n    \"amount\": 1.0          # Fixed\n}\n# Creates 2 \u00d7 3 = 6 cases:\n# temp=10, volume=1, amount=1.0\n# temp=10, volume=2, amount=1.0\n# temp=10, volume=3, amount=1.0\n# temp=20, volume=1, amount=1.0\n# temp=20, volume=2, amount=1.0\n# temp=20, volume=3, amount=1.0\n</code></pre>"},{"location":"getting-started/concepts/#formulas","title":"Formulas","text":"<p>Formulas are evaluated during compilation to create calculated values.</p>"},{"location":"getting-started/concepts/#formula-syntax","title":"Formula Syntax","text":"<pre><code># Simple formula\nresult = @($a + $b)\n\n# With functions\n#@ def square(x):\n#@     return x * x\narea = @(square($width))\n\n# Multi-line\n#@ import math\n#@ radius = $diameter / 2\n#@ area = math.pi * radius**2\ncircle_area = @(area)\n</code></pre>"},{"location":"getting-started/concepts/#formula-features","title":"Formula Features","text":"<ul> <li>Python or R expressions (set with <code>FZ_INTERPRETER</code> env var)</li> <li>Variable substitution - Use variables with <code>$</code> in formulas</li> <li>Function definitions - Define reusable functions</li> <li>Context sharing - Variables defined in one formula available in others</li> </ul>"},{"location":"getting-started/concepts/#models","title":"Models","text":"<p>A model defines how to parse inputs and extract outputs.</p>"},{"location":"getting-started/concepts/#basic-model","title":"Basic Model","text":"<pre><code>model = {\n    \"varprefix\": \"$\",\n    \"output\": {\n        \"result\": \"cat output.txt\"\n    }\n}\n</code></pre>"},{"location":"getting-started/concepts/#complete-model","title":"Complete Model","text":"<pre><code>model = {\n    # Input parsing\n    \"varprefix\": \"$\",           # Variable marker\n    \"formulaprefix\": \"@\",       # Formula marker\n    \"delim\": \"()\",              # Formula delimiters\n    \"commentline\": \"#\",         # Comment lines\n\n    # Output extraction\n    \"output\": {\n        \"pressure\": \"grep 'P:' out.txt | awk '{print $2}'\",\n        \"temp\": \"grep 'T:' out.txt | awk '{print $2}'\",\n        \"energy\": \"python extract_energy.py\"\n    },\n\n    # Optional identifier\n    \"id\": \"mymodel\"\n}\n</code></pre>"},{"location":"getting-started/concepts/#model-aliases","title":"Model Aliases","text":"<p>Store models in <code>.fz/models/mymodel.json</code> and use by name:</p> <pre><code>results = fz.fzr(\"input.txt\", variables, \"mymodel\")\n</code></pre>"},{"location":"getting-started/concepts/#calculators","title":"Calculators","text":"<p>Calculators define where and how calculations are executed.</p>"},{"location":"getting-started/concepts/#calculator-types","title":"Calculator Types","text":"Type URI Format Purpose Shell <code>sh://command args</code> Local execution SSH <code>ssh://user@host/command</code> Remote execution Cache <code>cache://directory</code> Reuse previous results"},{"location":"getting-started/concepts/#calculator-examples","title":"Calculator Examples","text":"<pre><code># Local shell\ncalculators = \"sh://bash script.sh\"\n\n# Remote SSH\ncalculators = \"ssh://user@server.com/bash /path/to/script.sh\"\n\n# Cache with fallback\ncalculators = [\n    \"cache://previous_results\",\n    \"sh://bash script.sh\"\n]\n</code></pre>"},{"location":"getting-started/concepts/#multiple-calculators","title":"Multiple Calculators","text":"<p>Provide a list for parallel execution or failover:</p> <pre><code># Parallel execution (4 workers)\ncalculators = [\n    \"sh://bash calc.sh\",\n    \"sh://bash calc.sh\",\n    \"sh://bash calc.sh\",\n    \"sh://bash calc.sh\"\n]\n\n# Failover chain\ncalculators = [\n    \"cache://results\",              # Try cache first\n    \"sh://bash fast_method.sh\",     # Fast but unstable\n    \"sh://bash robust_method.sh\",   # Slow but reliable\n    \"ssh://user@hpc/bash calc.sh\"   # Remote fallback\n]\n</code></pre>"},{"location":"getting-started/concepts/#results-structure","title":"Results Structure","text":"<p>FZ organizes results in a clear directory structure:</p> <pre><code>results/\n\u251c\u2500\u2500 T_celsius=10,V_L=1/\n\u2502   \u251c\u2500\u2500 input.txt          # Compiled input\n\u2502   \u251c\u2500\u2500 output.txt         # Calculation output\n\u2502   \u251c\u2500\u2500 log.txt            # Execution metadata\n\u2502   \u251c\u2500\u2500 out.txt            # Standard output\n\u2502   \u251c\u2500\u2500 err.txt            # Standard error\n\u2502   \u2514\u2500\u2500 .fz_hash           # Input file hashes\n\u251c\u2500\u2500 T_celsius=10,V_L=2/\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 T_celsius=20,V_L=1/\n    \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"getting-started/concepts/#dataframe-output","title":"DataFrame Output","text":"<p>Results are returned as a pandas DataFrame:</p> <pre><code>   T_celsius  V_L  n_mol  pressure  status  calculator  error  command\n0       10.0  1.0    1.0   2353.58    done      sh://   None   bash...\n1       10.0  2.0    1.0   1176.79    done      sh://   None   bash...\n2       20.0  1.0    1.0   2437.30    done      sh://   None   bash...\n</code></pre> <p>Columns include:</p> <ul> <li>Input variables - All parameters</li> <li>Output variables - Extracted results</li> <li>Metadata - Status, calculator used, errors, command</li> </ul>"},{"location":"getting-started/concepts/#caching","title":"Caching","text":"<p>FZ uses MD5 hashes of input files for intelligent caching.</p>"},{"location":"getting-started/concepts/#how-caching-works","title":"How Caching Works","text":"<ol> <li>Hash Generation - MD5 hash of all input files stored in <code>.fz_hash</code></li> <li>Cache Check - Compare hash with cached results</li> <li>Reuse - If match found and outputs valid, reuse results</li> <li>Fallback - If no match, proceed to next calculator</li> </ol>"},{"location":"getting-started/concepts/#cache-strategy","title":"Cache Strategy","text":"<pre><code># First run\nresults1 = fz.fzr(\n    \"input.txt\",\n    {\"param\": [1, 2, 3]},\n    model,\n    calculators=\"sh://expensive_calc.sh\",\n    results_dir=\"run1\"\n)\n\n# Add more cases - reuse previous\nresults2 = fz.fzr(\n    \"input.txt\",\n    {\"param\": [1, 2, 3, 4, 5]},  # 2 new cases\n    model,\n    calculators=[\n        \"cache://run1\",              # Reuse 1, 2, 3\n        \"sh://expensive_calc.sh\"     # Calculate 4, 5\n    ],\n    results_dir=\"run2\"\n)\n</code></pre>"},{"location":"getting-started/concepts/#parallel-execution","title":"Parallel Execution","text":"<p>FZ automatically parallelizes when multiple calculators are available.</p>"},{"location":"getting-started/concepts/#how-it-works","title":"How It Works","text":"<ol> <li>Round-robin distribution - Cases distributed to calculators</li> <li>Thread-safe locking - Each calculator locked during execution</li> <li>Load balancing - Available calculators pick up new cases</li> <li>Progress tracking - ETA calculated based on completed cases</li> </ol>"},{"location":"getting-started/concepts/#controlling-parallelism","title":"Controlling Parallelism","text":"<pre><code># Environment variable\nimport os\nos.environ['FZ_MAX_WORKERS'] = '8'\n\n# Or duplicate calculators\ncalculators = [\"sh://bash calc.sh\"] * 8\n</code></pre>"},{"location":"getting-started/concepts/#error-handling","title":"Error Handling","text":"<p>FZ provides robust error handling and retry mechanisms.</p>"},{"location":"getting-started/concepts/#retry-strategy","title":"Retry Strategy","text":"<pre><code>import os\nos.environ['FZ_MAX_RETRIES'] = '3'\n\nresults = fz.fzr(\n    \"input.txt\",\n    variables,\n    model,\n    calculators=[\n        \"sh://unreliable.sh\",\n        \"sh://backup.sh\"\n    ]\n)\n</code></pre> <p>Process: 1. Try first calculator 2. On failure, try next calculator 3. Repeat up to <code>MAX_RETRIES</code> times 4. Report final status in DataFrame</p>"},{"location":"getting-started/concepts/#graceful-interrupts","title":"Graceful Interrupts","text":"<p>Press Ctrl+C to stop gracefully:</p> <ul> <li>First Ctrl+C: Complete current calculations, save partial results</li> <li>Second Ctrl+C: Force quit (not recommended)</li> </ul> <p>Resume with cache:</p> <pre><code>results = fz.fzr(\n    \"input.txt\",\n    variables,\n    model,\n    calculators=[\n        \"cache://interrupted_run\",\n        \"sh://bash calc.sh\"\n    ]\n)\n</code></pre>"},{"location":"getting-started/concepts/#configuration","title":"Configuration","text":"<p>FZ can be configured via:</p>"},{"location":"getting-started/concepts/#environment-variables","title":"Environment Variables","text":"<pre><code>export FZ_LOG_LEVEL=DEBUG\nexport FZ_MAX_RETRIES=5\nexport FZ_MAX_WORKERS=4\nexport FZ_INTERPRETER=python\n</code></pre>"},{"location":"getting-started/concepts/#configuration-files","title":"Configuration Files","text":"<p>Store models and calculators in <code>.fz/</code>:</p> <pre><code>.fz/\n\u251c\u2500\u2500 models/\n\u2502   \u251c\u2500\u2500 model1.json\n\u2502   \u2514\u2500\u2500 model2.json\n\u2514\u2500\u2500 calculators/\n    \u251c\u2500\u2500 cluster1.json\n    \u2514\u2500\u2500 cluster2.json\n</code></pre>"},{"location":"getting-started/concepts/#python-api","title":"Python API","text":"<pre><code>from fz import get_config\n\nconfig = get_config()\nconfig.max_retries = 10\nconfig.max_workers = 8\n</code></pre>"},{"location":"getting-started/concepts/#best-practices","title":"Best Practices","text":""},{"location":"getting-started/concepts/#1-start-small","title":"1. Start Small","text":"<p>Test with a few cases first:</p> <pre><code># Development\nresults = fz.fzr(\"input.txt\", {\"param\": [1, 2]}, model, ...)\n\n# Production\nresults = fz.fzr(\"input.txt\", {\"param\": range(1000)}, model, ...)\n</code></pre>"},{"location":"getting-started/concepts/#2-use-caching","title":"2. Use Caching","text":"<p>Always include cache in calculator chain:</p> <pre><code>calculators = [\n    \"cache://previous_results\",\n    \"sh://bash calc.sh\"\n]\n</code></pre>"},{"location":"getting-started/concepts/#3-handle-failures","title":"3. Handle Failures","text":"<p>Check status column:</p> <pre><code>failed = results[results['status'] != 'done']\nif len(failed) &gt; 0:\n    print(f\"Failed cases: {len(failed)}\")\n    print(failed[['status', 'error']])\n</code></pre>"},{"location":"getting-started/concepts/#4-organize-results","title":"4. Organize Results","text":"<p>Use descriptive directory names:</p> <pre><code>results_dir = f\"results_{model_name}_{timestamp}\"\n</code></pre>"},{"location":"getting-started/concepts/#5-document-models","title":"5. Document Models","text":"<p>Include comments in model definitions:</p> <pre><code>{\n    \"varprefix\": \"$\",\n    \"output\": {\n        \"pressure\": \"grep 'P:' output.txt | awk '{print $2}'  # Extract pressure in Pa\"\n    }\n}\n</code></pre>"},{"location":"getting-started/concepts/#next-steps","title":"Next Steps","text":"<p>Now that you understand the core concepts:</p> <ul> <li>Core Functions - Deep dive into fzi, fzc, fzo, fzr</li> <li>Model Definition - Advanced model configuration</li> <li>Calculators - Master calculator types</li> <li>Examples - See concepts in action</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>FZ is a Python package that requires Python 3.8 or later. This guide covers different installation methods and optional dependencies.</p>"},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li>Python: 3.8 or later</li> <li>Operating System: Linux, macOS, or Windows</li> <li>Optional: SSH access for remote calculators, pandas for DataFrame output</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#from-source-recommended","title":"From Source (Recommended)","text":"<p>Install the latest development version from GitHub:</p> <pre><code>git clone https://github.com/Funz/fz.git\ncd fz\npip install -e .\n</code></pre> <p>The <code>-e</code> flag installs in editable mode, which is useful for development.</p>"},{"location":"getting-started/installation/#from-pypi-coming-soon","title":"From PyPI (Coming Soon)","text":"<p>Once published to PyPI, you'll be able to install with:</p> <pre><code>pip install funz\n</code></pre>"},{"location":"getting-started/installation/#using-virtual-environment-recommended","title":"Using Virtual Environment (Recommended)","text":"<p>It's best practice to use a virtual environment:</p> <pre><code># Create virtual environment\npython -m venv fz-env\n\n# Activate it\n# On Linux/macOS:\nsource fz-env/bin/activate\n# On Windows:\nfz-env\\Scripts\\activate\n\n# Install FZ\npip install -e /path/to/fz\n</code></pre>"},{"location":"getting-started/installation/#optional-dependencies","title":"Optional Dependencies","text":"<p>FZ has several optional dependencies for additional features:</p>"},{"location":"getting-started/installation/#ssh-support","title":"SSH Support","text":"<p>For remote calculator execution via SSH:</p> <pre><code>pip install paramiko\n</code></pre>"},{"location":"getting-started/installation/#dataframe-support","title":"DataFrame Support","text":"<p>For pandas DataFrame output (highly recommended):</p> <pre><code>pip install pandas\n</code></pre>"},{"location":"getting-started/installation/#all-optional-dependencies","title":"All Optional Dependencies","text":"<p>Install everything at once:</p> <pre><code>pip install paramiko pandas\n</code></pre>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<p>Test that FZ is properly installed:</p> <pre><code>python -c \"import fz; print('FZ version:', fz.__version__)\"\n</code></pre> <p>You should see output like: <pre><code>FZ version: 0.9.0\n</code></pre></p>"},{"location":"getting-started/installation/#google-colab","title":"Google Colab","text":"<p>To use FZ in Google Colab, add this to your notebook:</p> <pre><code>!pip install git+https://github.com/Funz/fz.git\n</code></pre> <p>Or for a specific version:</p> <pre><code>!pip install git+https://github.com/Funz/fz.git@v0.9.0\n</code></pre>"},{"location":"getting-started/installation/#installing-plugins","title":"Installing Plugins","text":"<p>FZ plugins are separate packages. Install them as needed:</p>"},{"location":"getting-started/installation/#fz-moret","title":"FZ-Moret","text":"<pre><code>git clone https://github.com/Funz/fz-moret.git\ncd fz-moret\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#fz-mcnp","title":"FZ-MCNP","text":"<pre><code>git clone https://github.com/Funz/fz-mcnp.git\ncd fz-mcnp\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#other-plugins","title":"Other Plugins","text":"<p>Follow the same pattern for other plugins:</p> <ul> <li>FZ-Cathare</li> <li>FZ-Cristal</li> <li>FZ-Scale</li> <li>FZ-Telemac</li> </ul>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<p>For FZ development, install additional dependencies:</p> <pre><code># Clone the repository\ngit clone https://github.com/Funz/fz.git\ncd fz\n\n# Install with development dependencies\npip install -e \".[dev]\"\n\n# Run tests to verify\npytest tests/\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#import-error","title":"Import Error","text":"<p>If you get <code>ModuleNotFoundError: No module named 'fz'</code>:</p> <ol> <li>Verify installation: <code>pip list | grep fz</code></li> <li>Check your Python path: <code>python -c \"import sys; print(sys.path)\"</code></li> <li>Ensure you're using the correct Python environment</li> </ol>"},{"location":"getting-started/installation/#ssh-connection-issues","title":"SSH Connection Issues","text":"<p>If SSH calculators fail:</p> <ol> <li>Install paramiko: <code>pip install paramiko</code></li> <li>Test SSH manually: <code>ssh user@host</code></li> <li>Check host keys are accepted</li> <li>Verify network connectivity</li> </ol>"},{"location":"getting-started/installation/#permission-errors","title":"Permission Errors","text":"<p>On Linux/macOS, if you get permission errors:</p> <pre><code># Use --user flag\npip install --user -e .\n\n# Or use sudo (not recommended)\nsudo pip install -e .\n</code></pre>"},{"location":"getting-started/installation/#system-specific-notes","title":"System-Specific Notes","text":""},{"location":"getting-started/installation/#windows","title":"Windows","text":"<ul> <li>Use PowerShell or Command Prompt</li> <li>Some shell calculators may require WSL or Git Bash</li> <li>Path separators are backslashes (<code>\\</code>) instead of forward slashes (<code>/</code>)</li> </ul>"},{"location":"getting-started/installation/#macos","title":"macOS","text":"<ul> <li>May need Xcode Command Line Tools: <code>xcode-select --install</code></li> <li>Use Homebrew to install Python if needed: <code>brew install python</code></li> </ul>"},{"location":"getting-started/installation/#linux","title":"Linux","text":"<ul> <li>Use your distribution's package manager for Python:<ul> <li>Ubuntu/Debian: <code>sudo apt install python3 python3-pip</code></li> <li>Fedora/RHEL: <code>sudo dnf install python3 python3-pip</code></li> <li>Arch: <code>sudo pacman -S python python-pip</code></li> </ul> </li> </ul>"},{"location":"getting-started/installation/#hpc-environments","title":"HPC Environments","text":"<p>For HPC clusters, you may need to:</p> <ol> <li>Load Python module: <code>module load python/3.9</code></li> <li>Install to user directory: <code>pip install --user -e .</code></li> <li>Add to PATH: <code>export PATH=$HOME/.local/bin:$PATH</code></li> </ol>"},{"location":"getting-started/installation/#docker-installation-advanced","title":"Docker Installation (Advanced)","text":"<p>Create a Dockerfile for containerized FZ:</p> <pre><code>FROM python:3.10-slim\n\n# Install dependencies\nRUN apt-get update &amp;&amp; apt-get install -y git &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install FZ\nRUN pip install git+https://github.com/Funz/fz.git\n\n# Set working directory\nWORKDIR /workspace\n\n# Default command\nCMD [\"python\"]\n</code></pre> <p>Build and run:</p> <pre><code>docker build -t fz-env .\ndocker run -it -v $(pwd):/workspace fz-env\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Once installed, proceed to:</p> <ul> <li>Quick Start Guide - Your first FZ calculation</li> <li>Core Concepts - Understand FZ fundamentals</li> <li>Examples - See FZ in action</li> </ul>"},{"location":"getting-started/quickstart/","title":"Quick Start","text":"<p>This guide will get you up and running with FZ in just a few minutes. We'll create a simple parametric study for the ideal gas law.</p>"},{"location":"getting-started/quickstart/#the-complete-example","title":"The Complete Example","text":"<p>We'll calculate pressure for different temperatures and volumes using the ideal gas law: <code>PV = nRT</code></p>"},{"location":"getting-started/quickstart/#step-1-create-input-template","title":"Step 1: Create Input Template","text":"<p>Create a file named <code>input.txt</code>:</p> <pre><code># input file for Perfect Gas Pressure, with variables n_mol, T_celsius, V_L\nn_mol=$n_mol\nT_kelvin=@($T_celsius + 273.15)\n#@ def L_to_m3(L):\n#@     return(L / 1000)\nV_m3=@(L_to_m3($V_L))\n</code></pre> <p>What's happening here?</p> <ul> <li><code>$n_mol</code>, <code>$T_celsius</code>, <code>$V_L</code> are variables (marked with <code>$</code>)</li> <li><code>@(...)</code> are formulas that are evaluated during compilation</li> <li><code>#@</code> lines define Python functions available to formulas</li> </ul>"},{"location":"getting-started/quickstart/#step-2-create-calculation-script","title":"Step 2: Create Calculation Script","text":"<p>Create a file named <code>calculate.sh</code>:</p> <pre><code>#!/bin/bash\n\n# Read input file\nsource $1\n\n# Simulate calculation time\nsleep 1\n\n# Calculate pressure using ideal gas law\n# P = nRT/V (R = 8.314 J/(mol\u00b7K))\necho 'pressure = '`echo \"scale=4;$n_mol*8.314*$T_kelvin/$V_m3\" | bc` &gt; output.txt\n\necho 'Done'\n</code></pre> <p>Make it executable:</p> <pre><code>chmod +x calculate.sh\n</code></pre>"},{"location":"getting-started/quickstart/#step-3-run-parametric-study","title":"Step 3: Run Parametric Study","text":"<p>Create a file named <code>run_study.py</code>:</p> <pre><code>import fz\n\n# Define the model\nmodel = {\n    \"varprefix\": \"$\",           # Variables are marked with $\n    \"formulaprefix\": \"@\",       # Formulas are marked with @\n    \"delim\": \"()\",              # Formula delimiters\n    \"commentline\": \"#\",         # Comment character\n    \"output\": {\n        \"pressure\": \"grep 'pressure = ' output.txt | awk '{print $3}'\"\n    }\n}\n\n# Define parameter values\ninput_variables = {\n    \"T_celsius\": [10, 20, 30, 40],  # 4 temperatures\n    \"V_L\": [1, 2, 5],                # 3 volumes\n    \"n_mol\": 1.0                     # fixed amount\n}\n\n# Run all combinations (4 \u00d7 3 = 12 cases)\nresults = fz.fzr(\n    \"input.txt\",\n    input_variables,\n    model,\n    calculators=\"sh://bash calculate.sh\",\n    results_dir=\"results\"\n)\n\n# Display results\nprint(results)\nprint(f\"\\nCompleted {len(results)} calculations\")\n</code></pre>"},{"location":"getting-started/quickstart/#step-4-execute","title":"Step 4: Execute","text":"<p>Run the study:</p> <pre><code>python run_study.py\n</code></pre> <p>Expected output:</p> <pre><code>   T_celsius  V_L  n_mol     pressure status calculator       error command\n0         10  1.0    1.0  2353.58     done     sh://        None    bash...\n1         10  2.0    1.0  1176.79     done     sh://        None    bash...\n2         10  5.0    1.0   470.72     done     sh://        None    bash...\n3         20  1.0    1.0  2437.30     done     sh://        None    bash...\n...\n\nCompleted 12 calculations\n</code></pre>"},{"location":"getting-started/quickstart/#understanding-the-results","title":"Understanding the Results","text":"<p>The results DataFrame contains:</p> <ul> <li>Input variables: <code>T_celsius</code>, <code>V_L</code>, <code>n_mol</code></li> <li>Output variables: <code>pressure</code></li> <li>Metadata: <code>status</code>, <code>calculator</code>, <code>error</code>, <code>command</code></li> </ul> <p>You can use pandas to analyze:</p> <pre><code># Find maximum pressure\nmax_pressure = results['pressure'].max()\nprint(f\"Maximum pressure: {max_pressure}\")\n\n# Filter results\nhigh_temp = results[results['T_celsius'] &gt; 25]\nprint(high_temp)\n\n# Plot results\nimport matplotlib.pyplot as plt\n\nfor volume in results['V_L'].unique():\n    data = results[results['V_L'] == volume]\n    plt.plot(data['T_celsius'], data['pressure'], \n             marker='o', label=f'V={volume} L')\n\nplt.xlabel('Temperature (\u00b0C)')\nplt.ylabel('Pressure (Pa)')\nplt.legend()\nplt.show()\n</code></pre>"},{"location":"getting-started/quickstart/#what-just-happened","title":"What Just Happened?","text":"<p>Let's break down the workflow:</p> <ol> <li> <p>fzi (Parse Input) - FZ identified variables <code>$n_mol</code>, <code>$T_celsius</code>, <code>$V_L</code> in <code>input.txt</code></p> </li> <li> <p>fzc (Compile) - For each parameter combination, FZ:</p> </li> <li>Created a directory (e.g., <code>results/T_celsius=10,V_L=1</code>)</li> <li>Substituted variable values</li> <li>Evaluated formulas</li> <li> <p>Saved compiled input file</p> </li> <li> <p>Calculator Execution - For each case, FZ:</p> </li> <li>Ran <code>bash calculate.sh input.txt</code> in the case directory</li> <li>Captured output and errors</li> <li> <p>Logged execution metadata</p> </li> <li> <p>fzo (Parse Output) - FZ:</p> </li> <li>Ran the output command to extract <code>pressure</code></li> <li>Collected results from all cases</li> <li> <p>Built a pandas DataFrame</p> </li> <li> <p>fzr (Complete Run) - FZ orchestrated all steps automatically!</p> </li> </ol>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":""},{"location":"getting-started/quickstart/#try-different-calculators","title":"Try Different Calculators","text":"<p>Run on a remote server:</p> <pre><code>results = fz.fzr(\n    \"input.txt\",\n    input_variables,\n    model,\n    calculators=\"ssh://user@server.com/bash /path/to/calculate.sh\",\n    results_dir=\"remote_results\"\n)\n</code></pre> <p>Use caching to avoid recalculation:</p> <pre><code>results = fz.fzr(\n    \"input.txt\",\n    input_variables,\n    model,\n    calculators=[\n        \"cache://results\",           # Check cache first\n        \"sh://bash calculate.sh\"     # Run if not cached\n    ],\n    results_dir=\"cached_results\"\n)\n</code></pre>"},{"location":"getting-started/quickstart/#run-in-parallel","title":"Run in Parallel","text":"<p>Use multiple calculators for parallel execution:</p> <pre><code>results = fz.fzr(\n    \"input.txt\",\n    input_variables,\n    model,\n    calculators=[\n        \"sh://bash calculate.sh\",\n        \"sh://bash calculate.sh\",\n        \"sh://bash calculate.sh\",\n        \"sh://bash calculate.sh\"\n    ],  # 4 parallel workers\n    results_dir=\"parallel_results\"\n)\n</code></pre>"},{"location":"getting-started/quickstart/#save-model-as-alias","title":"Save Model as Alias","text":"<p>Create <code>.fz/models/perfectgas.json</code>:</p> <pre><code>{\n    \"varprefix\": \"$\",\n    \"formulaprefix\": \"@\",\n    \"delim\": \"()\",\n    \"commentline\": \"#\",\n    \"output\": {\n        \"pressure\": \"grep 'pressure = ' output.txt | awk '{print $3}'\"\n    },\n    \"id\": \"perfectgas\"\n}\n</code></pre> <p>Then use by name:</p> <pre><code>results = fz.fzr(\n    \"input.txt\",\n    input_variables,\n    \"perfectgas\",  # Model name instead of dict\n    calculators=\"sh://bash calculate.sh\",\n    results_dir=\"results\"\n)\n</code></pre>"},{"location":"getting-started/quickstart/#common-patterns","title":"Common Patterns","text":""},{"location":"getting-started/quickstart/#single-parameter-study","title":"Single Parameter Study","text":"<p>Vary one parameter:</p> <pre><code>results = fz.fzr(\n    \"input.txt\",\n    {\"temperature\": [100, 200, 300, 400, 500]},\n    model,\n    calculators=\"sh://bash calc.sh\"\n)\n</code></pre>"},{"location":"getting-started/quickstart/#full-factorial-design","title":"Full Factorial Design","text":"<p>Vary multiple parameters:</p> <pre><code>results = fz.fzr(\n    \"input.txt\",\n    {\n        \"param1\": [1, 2, 3],      # 3 values\n        \"param2\": [10, 20],       # 2 values\n        \"param3\": [0.1, 0.5, 1.0] # 3 values\n    },  # Total: 3 \u00d7 2 \u00d7 3 = 18 cases\n    model,\n    calculators=\"sh://bash calc.sh\"\n)\n</code></pre>"},{"location":"getting-started/quickstart/#mixed-fixed-and-variable-parameters","title":"Mixed Fixed and Variable Parameters","text":"<pre><code>results = fz.fzr(\n    \"input.txt\",\n    {\n        \"variable_param\": [1, 2, 3, 4],  # Variable\n        \"fixed_param\": 100                # Fixed\n    },\n    model,\n    calculators=\"sh://bash calc.sh\"\n)\n</code></pre>"},{"location":"getting-started/quickstart/#troubleshooting","title":"Troubleshooting","text":"<p>Issue: Calculation fails with \"command not found\"</p> <pre><code># Use absolute paths\ncalculators=\"sh://bash /full/path/to/calculate.sh\"\n</code></pre> <p>Issue: Output not parsed correctly</p> <pre><code># Test your output command manually\nimport subprocess\nresult = subprocess.run(\n    \"grep 'pressure = ' output.txt | awk '{print $3}'\",\n    shell=True, capture_output=True, text=True\n)\nprint(result.stdout)\n</code></pre> <p>Issue: Formulas not evaluating</p> <pre><code># Check formula syntax\n# Ensure variables are marked with $ and formulas with @\n# Check that commentline is correct\n</code></pre>"},{"location":"getting-started/quickstart/#google-colab-quick-start","title":"Google Colab Quick Start","text":"<p>Want to try FZ without installing anything locally? Use Google Colab:</p> <p></p>"},{"location":"getting-started/quickstart/#further-reading","title":"Further Reading","text":"<ul> <li>Core Concepts - Understand FZ fundamentals</li> <li>Core Functions - Deep dive into fzi, fzc, fzo, fzr</li> <li>Model Definition - Learn about model configuration</li> <li>Examples - More complete examples</li> </ul>"},{"location":"plugins/","title":"FZ Plugins","text":"<p>FZ plugins extend the framework with specialized support for specific simulation codes and computational models.</p>"},{"location":"plugins/#available-plugins","title":"Available Plugins","text":""},{"location":"plugins/#nuclear-radiation-transport","title":"Nuclear &amp; Radiation Transport","text":""},{"location":"plugins/#fz-mcnp","title":"FZ-MCNP","text":"<p>Monte Carlo N-Particle Transport Code support.</p> <ul> <li>Simulation type: Radiation transport</li> <li>Repository: Funz/fz-mcnp</li> <li>Use cases: Shielding, criticality, dose calculations</li> </ul>"},{"location":"plugins/#fz-scale","title":"FZ-Scale","text":"<p>SCALE nuclear analysis code system.</p> <ul> <li>Simulation type: Nuclear criticality, shielding, isotopic analysis</li> <li>Repository: Funz/fz-scale</li> <li>Use cases: Reactor physics, fuel cycle, depletion</li> </ul>"},{"location":"plugins/#thermal-hydraulics","title":"Thermal-Hydraulics","text":""},{"location":"plugins/#fz-cathare","title":"FZ-Cathare","text":"<p>CATHARE thermal-hydraulic system code.</p> <ul> <li>Simulation type: Thermal-hydraulics</li> <li>Repository: Funz/fz-cathare</li> <li>Use cases: Reactor safety, accident analysis</li> </ul>"},{"location":"plugins/#hydrodynamics","title":"Hydrodynamics","text":""},{"location":"plugins/#fz-telemac","title":"FZ-Telemac","text":"<p>TELEMAC-MASCARET hydrodynamics suite.</p> <ul> <li>Simulation type: Free surface flow, sediment transport</li> <li>Repository: Funz/fz-telemac</li> <li>Use cases: River flow, coastal modeling, dam breaks</li> </ul>"},{"location":"plugins/#specialized-models","title":"Specialized Models","text":""},{"location":"plugins/#fz-moret","title":"FZ-Moret","text":"<p>Moret model plugin.</p> <ul> <li>Simulation type: Specialized computational model</li> <li>Repository: Funz/fz-moret</li> <li>Use cases: Domain-specific simulations</li> </ul>"},{"location":"plugins/#fz-cristal","title":"FZ-Cristal","text":"<p>Cristal simulation support.</p> <ul> <li>Simulation type: Specialized simulations</li> <li>Repository: Funz/fz-cristal</li> <li>Use cases: Custom computational models</li> </ul>"},{"location":"plugins/#plugin-architecture","title":"Plugin Architecture","text":"<p>FZ plugins provide:</p> <ol> <li>Pre-configured models - Ready-to-use model definitions</li> <li>Input templates - Standard input file formats</li> <li>Output parsers - Specialized result extraction</li> <li>Documentation - Domain-specific guides</li> <li>Examples - Working demonstrations</li> </ol>"},{"location":"plugins/#plugin-structure","title":"Plugin Structure","text":"<pre><code>from fz_plugin import get_model, get_calculator\n\n# Get pre-configured model\nmodel = get_model('standard')\n\n# Get calculator for the code\ncalculator = get_calculator('local')  # or 'cluster', 'docker', etc.\n\n# Run with FZ\nimport fz\nresults = fz.fzr(\n    \"input_template.txt\",\n    variables,\n    model,\n    calculators=calculator\n)\n</code></pre>"},{"location":"plugins/#installing-plugins","title":"Installing Plugins","text":""},{"location":"plugins/#from-source","title":"From Source","text":"<pre><code># Clone plugin repository\ngit clone https://github.com/Funz/fz-&lt;plugin&gt;.git\ncd fz-&lt;plugin&gt;\n\n# Install\npip install -e .\n</code></pre>"},{"location":"plugins/#in-google-colab","title":"In Google Colab","text":"<pre><code>!pip install git+https://github.com/Funz/fz-&lt;plugin&gt;.git\n</code></pre>"},{"location":"plugins/#using-plugins","title":"Using Plugins","text":""},{"location":"plugins/#basic-usage","title":"Basic Usage","text":"<pre><code>import fz\nfrom fz_mcnp import get_model\n\n# Use plugin model\nmodel = get_model('criticality')\n\n# Define parameters\nvariables = {\n    \"enrichment\": [2.0, 3.0, 4.0, 5.0],\n    \"radius\": [10, 15, 20],\n    \"height\": [30, 40, 50]\n}\n\n# Run parametric study\nresults = fz.fzr(\n    \"reactor.inp\",\n    variables,\n    model,\n    calculators=\"sh://mcnp6 i=reactor.inp\",\n    results_dir=\"mcnp_results\"\n)\n</code></pre>"},{"location":"plugins/#with-custom-calculator","title":"With Custom Calculator","text":"<pre><code># Define calculator for HPC\ncalculator = \"ssh://user@cluster.edu/module load mcnp &amp;&amp; mcnp6\"\n\nresults = fz.fzr(\n    \"reactor.inp\",\n    variables,\n    model,\n    calculators=calculator,\n    results_dir=\"mcnp_hpc_results\"\n)\n</code></pre>"},{"location":"plugins/#plugin-models","title":"Plugin Models","text":"<p>Each plugin provides pre-configured models for common use cases.</p>"},{"location":"plugins/#example-fz-mcnp-models","title":"Example: FZ-MCNP Models","text":"<pre><code>from fz_mcnp import list_models, get_model\n\n# List available models\nmodels = list_models()\nprint(models)\n# ['criticality', 'shielding', 'dose', 'activation']\n\n# Get specific model\ncriticality_model = get_model('criticality')\nprint(criticality_model)\n# {\n#     'varprefix': '$',\n#     'output': {\n#         'k_eff': 'grep \"final result\" output | ...',\n#         'k_err': '...'\n#     }\n# }\n</code></pre>"},{"location":"plugins/#creating-your-own-plugin","title":"Creating Your Own Plugin","text":""},{"location":"plugins/#plugin-template","title":"Plugin Template","text":"<pre><code># fz_myplugin/__init__.py\n\n# Pre-defined models\nMODELS = {\n    'standard': {\n        'varprefix': '$',\n        'formulaprefix': '@',\n        'output': {\n            'result1': 'grep ...',\n            'result2': 'grep ...'\n        }\n    }\n}\n\ndef get_model(name='standard'):\n    \"\"\"Get pre-configured model\"\"\"\n    if name not in MODELS:\n        raise ValueError(f\"Model {name} not found\")\n    return MODELS[name]\n\ndef get_calculator(env='local'):\n    \"\"\"Get calculator URI for environment\"\"\"\n    calculators = {\n        'local': 'sh://mysim',\n        'cluster': 'ssh://user@cluster/mysim',\n        'docker': 'sh://docker run mysim'\n    }\n    return calculators.get(env, calculators['local'])\n</code></pre>"},{"location":"plugins/#plugin-setuppy","title":"Plugin setup.py","text":"<pre><code>from setuptools import setup, find_packages\n\nsetup(\n    name='fz-myplugin',\n    version='0.1.0',\n    packages=find_packages(),\n    install_requires=['fz&gt;=0.9.0'],\n    author='Your Name',\n    description='FZ plugin for MySimulation',\n    url='https://github.com/yourusername/fz-myplugin',\n)\n</code></pre>"},{"location":"plugins/#plugin-examples","title":"Plugin Examples","text":""},{"location":"plugins/#fz-mcnp-example","title":"FZ-MCNP Example","text":"<pre><code>import fz\nfrom fz_mcnp import get_model\n\nmodel = get_model('shielding')\n\nresults = fz.fzr(\n    \"shield.inp\",\n    {\n        \"thickness\": [5, 10, 15, 20],  # cm\n        \"material\": [\"concrete\", \"lead\", \"steel\"]\n    },\n    model,\n    calculators=\"sh://mcnp6 i=shield.inp\",\n    results_dir=\"shielding_study\"\n)\n\n# Analyze dose reduction\nprint(results.groupby('material')['dose_rate'].mean())\n</code></pre>"},{"location":"plugins/#fz-telemac-example","title":"FZ-Telemac Example","text":"<pre><code>import fz\nfrom fz_telemac import get_model\n\nmodel = get_model('2d_flow')\n\nresults = fz.fzr(\n    \"river.cas\",\n    {\n        \"discharge\": [100, 200, 500, 1000],  # m\u00b3/s\n        \"roughness\": [0.02, 0.03, 0.04]      # Manning's n\n    },\n    model,\n    calculators=\"sh://telemac2d river.cas\",\n    results_dir=\"flood_analysis\"\n)\n\n# Extract peak water level\nprint(results.groupby('discharge')['max_water_level'].describe())\n</code></pre>"},{"location":"plugins/#plugin-best-practices","title":"Plugin Best Practices","text":""},{"location":"plugins/#1-provide-multiple-models","title":"1. Provide Multiple Models","text":"<pre><code>MODELS = {\n    'simple': {...},      # Basic use case\n    'advanced': {...},    # Advanced features\n    'validation': {...}   # Model validation\n}\n</code></pre>"},{"location":"plugins/#2-include-input-templates","title":"2. Include Input Templates","text":"<pre><code>fz_myplugin/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 models.py\n\u251c\u2500\u2500 templates/\n\u2502   \u251c\u2500\u2500 basic_input.txt\n\u2502   \u251c\u2500\u2500 advanced_input.txt\n\u2502   \u2514\u2500\u2500 validation_input.txt\n\u2514\u2500\u2500 examples/\n    \u2514\u2500\u2500 example_study.py\n</code></pre>"},{"location":"plugins/#3-document-output-variables","title":"3. Document Output Variables","text":"<pre><code>MODELS = {\n    'standard': {\n        'output': {\n            'k_eff': 'grep \"k-eff\" ...',     # Effective multiplication factor\n            'k_err': 'grep \"error\" ...',     # Statistical uncertainty\n            'runtime': 'grep \"time\" ...'     # Computation time (s)\n        }\n    }\n}\n</code></pre>"},{"location":"plugins/#4-provide-validation","title":"4. Provide Validation","text":"<pre><code>def validate_input(variables):\n    \"\"\"Validate input parameters\"\"\"\n    if variables.get('temperature', 0) &lt; 0:\n        raise ValueError(\"Temperature must be positive\")\n    # More validation...\n</code></pre>"},{"location":"plugins/#plugin-documentation","title":"Plugin Documentation","text":"<p>Each plugin should include:</p> <ul> <li>README.md - Overview and quick start</li> <li>Installation guide - Setup instructions</li> <li>Model reference - Available models and outputs</li> <li>Examples - Working demonstrations</li> <li>API reference - Function documentation</li> </ul>"},{"location":"plugins/#community-plugins","title":"Community Plugins","text":"<p>Want to contribute a plugin?</p> <ol> <li>Fork the FZ plugin template</li> <li>Implement your plugin</li> <li>Add tests and documentation</li> <li>Submit a pull request</li> </ol>"},{"location":"plugins/#next-steps","title":"Next Steps","text":"<p>Explore specific plugins:</p> <ul> <li>FZ-Moret - Moret model</li> <li>FZ-MCNP - Monte Carlo N-Particle</li> <li>FZ-Cathare - Thermal-hydraulics</li> <li>FZ-Cristal - Cristal simulations</li> <li>FZ-Scale - Nuclear analysis</li> <li>FZ-Telemac - Hydrodynamics</li> </ul> <p>Or learn more:</p> <ul> <li>User Guide - FZ fundamentals</li> <li>Examples - Complete examples</li> <li>Contributing - Develop plugins</li> </ul>"},{"location":"plugins/cathare/","title":"FZ-Cathare Plugin","text":"<p>CATHARE thermal-hydraulic system code support for FZ.</p>"},{"location":"plugins/cathare/#installation","title":"Installation","text":"<pre><code>git clone https://github.com/Funz/fz-cathare.git\ncd fz-cathare\npip install -e .\n</code></pre>"},{"location":"plugins/cathare/#repository","title":"Repository","text":"<p>Funz/fz-cathare</p>"},{"location":"plugins/cristal/","title":"FZ-Cristal Plugin","text":"<p>Cristal simulation support for FZ.</p>"},{"location":"plugins/cristal/#installation","title":"Installation","text":"<pre><code>git clone https://github.com/Funz/fz-cristal.git\ncd fz-cristal\npip install -e .\n</code></pre>"},{"location":"plugins/cristal/#repository","title":"Repository","text":"<p>Funz/fz-cristal</p>"},{"location":"plugins/mcnp/","title":"FZ-MCNP Plugin","text":"<p>Monte Carlo N-Particle Transport Code support for FZ.</p>"},{"location":"plugins/mcnp/#installation","title":"Installation","text":"<pre><code>git clone https://github.com/Funz/fz-mcnp.git\ncd fz-mcnp\npip install -e .\n</code></pre>"},{"location":"plugins/mcnp/#repository","title":"Repository","text":"<p>Funz/fz-mcnp</p>"},{"location":"plugins/moret/","title":"FZ-Moret Plugin","text":"<p>Moret model plugin for FZ.</p>"},{"location":"plugins/moret/#installation","title":"Installation","text":"<pre><code>git clone https://github.com/Funz/fz-moret.git\ncd fz-moret\npip install -e .\n</code></pre>"},{"location":"plugins/moret/#repository","title":"Repository","text":"<p>Funz/fz-moret</p>"},{"location":"plugins/scale/","title":"FZ-Scale Plugin","text":"<p>SCALE nuclear analysis code system support for FZ.</p>"},{"location":"plugins/scale/#installation","title":"Installation","text":"<pre><code>git clone https://github.com/Funz/fz-scale.git\ncd fz-scale\npip install -e .\n</code></pre>"},{"location":"plugins/scale/#repository","title":"Repository","text":"<p>Funz/fz-scale</p>"},{"location":"plugins/telemac/","title":"FZ-Telemac Plugin","text":"<p>TELEMAC-MASCARET hydrodynamics suite support for FZ.</p>"},{"location":"plugins/telemac/#installation","title":"Installation","text":"<pre><code>git clone https://github.com/Funz/fz-telemac.git\ncd fz-telemac\npip install -e .\n</code></pre>"},{"location":"plugins/telemac/#repository","title":"Repository","text":"<p>Funz/fz-telemac</p>"},{"location":"reference/api/","title":"API Reference","text":"<ul> <li>fzi - Parse input variables</li> <li>fzc - Compile input files</li> <li>fzo - Parse output files</li> <li>fzr - Run parametric study</li> </ul> <p>See the main FZ documentation for complete API details.</p>"},{"location":"reference/configuration/","title":"Configuration","text":"<p>FZ configuration via environment variables and files. See the main FZ documentation for complete details.</p>"},{"location":"reference/environment/","title":"Environment Variables","text":"<ul> <li><code>FZ_LOG_LEVEL</code>: Logging level (DEBUG, INFO, WARNING, ERROR)</li> <li><code>FZ_MAX_RETRIES</code>: Maximum retry attempts</li> <li><code>FZ_MAX_WORKERS</code>: Thread pool size</li> <li><code>FZ_SSH_KEEPALIVE</code>: SSH keepalive interval</li> <li><code>FZ_INTERPRETER</code>: Formula interpreter (python/R)</li> </ul> <p>See the main FZ documentation for complete details.</p>"},{"location":"reference/troubleshooting/","title":"Troubleshooting","text":"<p>Common issues and solutions. See the main FZ documentation for complete details.</p>"},{"location":"user-guide/model-definition/","title":"Model Definition","text":"<p>A model defines how FZ parses inputs and extracts outputs. See the main FZ documentation for complete details.</p>"},{"location":"user-guide/advanced/caching/","title":"Caching Strategy","text":"<p>Intelligent result reuse. See the main FZ documentation for complete details.</p>"},{"location":"user-guide/advanced/formulas/","title":"Formula Evaluation","text":"<p>Use Python or R expressions in input templates. See the main FZ documentation for complete details.</p>"},{"location":"user-guide/advanced/interrupts/","title":"Interrupt Handling","text":"<p>Graceful shutdown with Ctrl+C. See the main FZ documentation for complete details.</p>"},{"location":"user-guide/advanced/parallel/","title":"Parallel Execution","text":"<p>Run multiple cases concurrently. See the main FZ documentation for complete details.</p>"},{"location":"user-guide/calculators/cache/","title":"Cache Calculator","text":"<p>Reuse previous calculation results. See the main FZ documentation for complete details.</p>"},{"location":"user-guide/calculators/overview/","title":"Calculator Overview","text":"<p>Calculators define where and how calculations are executed. See the main FZ documentation for complete details.</p>"},{"location":"user-guide/calculators/shell/","title":"Local Shell Calculator","text":"<p>Execute calculations locally using shell commands. See the main FZ documentation for complete details.</p>"},{"location":"user-guide/calculators/ssh/","title":"SSH Remote Calculator","text":"<p>Execute calculations on remote servers via SSH. See the main FZ documentation for complete details.</p>"},{"location":"user-guide/core-functions/fzc/","title":"fzc - Compile Input Files","text":"<p>The <code>fzc</code> function compiles input files by substituting variable values and evaluating formulas.</p>"},{"location":"user-guide/core-functions/fzc/#function-signature","title":"Function Signature","text":"<pre><code>fz.fzc(input_path, input_variables, model, output_dir)\n</code></pre>"},{"location":"user-guide/core-functions/fzc/#parameters","title":"Parameters","text":"<ul> <li><code>input_path</code> (str): Path to input file or directory</li> <li><code>input_variables</code> (dict): Variable values (scalar or list)</li> <li><code>model</code> (dict): Model definition</li> <li><code>output_dir</code> (str): Output directory path</li> </ul>"},{"location":"user-guide/core-functions/fzc/#example","title":"Example","text":"<pre><code>import fz\n\nmodel = {\"varprefix\": \"$\", \"formulaprefix\": \"@\"}\n\nfz.fzc(\n    \"input.txt\",\n    {\"temperature\": [100, 200], \"pressure\": 1.0},\n    model,\n    \"compiled\"\n)\n</code></pre> <p>See the main FZ documentation for complete details.</p>"},{"location":"user-guide/core-functions/fzi/","title":"fzi - Parse Input Variables","text":"<p>The <code>fzi</code> function parses input files to identify all variables.</p>"},{"location":"user-guide/core-functions/fzi/#function-signature","title":"Function Signature","text":"<pre><code>fz.fzi(input_path, model)\n</code></pre>"},{"location":"user-guide/core-functions/fzi/#parameters","title":"Parameters","text":"<ul> <li><code>input_path</code> (str): Path to input file or directory</li> <li><code>model</code> (dict): Model definition with varprefix</li> </ul>"},{"location":"user-guide/core-functions/fzi/#returns","title":"Returns","text":"<p>Dictionary with variable names as keys (values are None)</p>"},{"location":"user-guide/core-functions/fzi/#example","title":"Example","text":"<pre><code>import fz\n\nmodel = {\"varprefix\": \"$\"}\nvariables = fz.fzi(\"input.txt\", model)\nprint(variables)\n# {'temperature': None, 'pressure': None}\n</code></pre> <p>See the main FZ documentation for complete details.</p>"},{"location":"user-guide/core-functions/fzo/","title":"fzo - Parse Output Files","text":"<p>The <code>fzo</code> function reads and parses calculation results from output directories.</p>"},{"location":"user-guide/core-functions/fzo/#function-signature","title":"Function Signature","text":"<pre><code>fz.fzo(output_dir, model)\n</code></pre>"},{"location":"user-guide/core-functions/fzo/#parameters","title":"Parameters","text":"<ul> <li><code>output_dir</code> (str): Path to results directory</li> <li><code>model</code> (dict): Model definition with output commands</li> </ul>"},{"location":"user-guide/core-functions/fzo/#returns","title":"Returns","text":"<p>pandas DataFrame with results</p>"},{"location":"user-guide/core-functions/fzo/#example","title":"Example","text":"<pre><code>import fz\n\nmodel = {\n    \"output\": {\n        \"pressure\": \"grep 'Pressure:' output.txt | awk '{print $2}'\"\n    }\n}\n\nresults = fz.fzo(\"results\", model)\nprint(results)\n</code></pre> <p>See the main FZ documentation for complete details.</p>"},{"location":"user-guide/core-functions/fzr/","title":"fzr - Run Parametric Study","text":"<p>The <code>fzr</code> function orchestrates complete parametric studies by combining all FZ capabilities: parsing inputs, compiling cases, executing calculations, and collecting results.</p>"},{"location":"user-guide/core-functions/fzr/#function-signature","title":"Function Signature","text":"<pre><code>fz.fzr(\n    input_path,\n    input_variables,\n    model,\n    calculators,\n    results_dir=\"results\",\n    **kwargs\n)\n</code></pre>"},{"location":"user-guide/core-functions/fzr/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>input_path</code> <code>str</code> Yes Path to input file or directory <code>input_variables</code> <code>dict</code> Yes Dictionary of variable names and values <code>model</code> <code>dict</code> or <code>str</code> Yes Model definition or model alias name <code>calculators</code> <code>str</code> or <code>list</code> Yes Calculator URI(s) <code>results_dir</code> <code>str</code> No Output directory (default: \"results\")"},{"location":"user-guide/core-functions/fzr/#returns","title":"Returns","text":"<p>pandas.DataFrame - Results with columns for:</p> <ul> <li>All input variables</li> <li>All output variables defined in model</li> <li>Metadata: <code>status</code>, <code>calculator</code>, <code>error</code>, <code>command</code></li> </ul>"},{"location":"user-guide/core-functions/fzr/#basic-usage","title":"Basic Usage","text":""},{"location":"user-guide/core-functions/fzr/#simple-parametric-study","title":"Simple Parametric Study","text":"<pre><code>import fz\n\nmodel = {\n    \"varprefix\": \"$\",\n    \"output\": {\n        \"result\": \"cat output.txt\"\n    }\n}\n\nresults = fz.fzr(\n    input_path=\"input.txt\",\n    input_variables={\"temperature\": [100, 200, 300]},\n    model=model,\n    calculators=\"sh://bash calculate.sh\",\n    results_dir=\"results\"\n)\n\nprint(results)\n</code></pre>"},{"location":"user-guide/core-functions/fzr/#full-factorial-design","title":"Full Factorial Design","text":"<pre><code>results = fz.fzr(\n    \"input.txt\",\n    {\n        \"pressure\": [1, 10, 100],      # 3 values\n        \"temperature\": [300, 400, 500], # 3 values\n        \"concentration\": 0.5            # Fixed\n    },  # Total: 3 \u00d7 3 = 9 cases\n    model,\n    calculators=\"sh://bash calc.sh\"\n)\n</code></pre>"},{"location":"user-guide/core-functions/fzr/#variable-handling","title":"Variable Handling","text":""},{"location":"user-guide/core-functions/fzr/#scalar-variables","title":"Scalar Variables","text":"<p>Fixed values for all cases:</p> <pre><code>results = fz.fzr(\n    \"input.txt\",\n    {\n        \"param1\": 100,        # Fixed\n        \"param2\": \"value\",    # Fixed string\n        \"param3\": [1, 2, 3]   # Variable\n    },\n    model,\n    calculators=\"sh://bash calc.sh\"\n)\n# Creates 3 cases\n</code></pre>"},{"location":"user-guide/core-functions/fzr/#list-variables","title":"List Variables","text":"<p>Creates Cartesian product:</p> <pre><code>results = fz.fzr(\n    \"input.txt\",\n    {\n        \"x\": [1, 2],       # 2 values\n        \"y\": [10, 20, 30]  # 3 values\n    },\n    model,\n    calculators=\"sh://bash calc.sh\"\n)\n# Creates 2 \u00d7 3 = 6 cases\n</code></pre>"},{"location":"user-guide/core-functions/fzr/#large-parameter-spaces","title":"Large Parameter Spaces","text":"<pre><code>import numpy as np\n\nresults = fz.fzr(\n    \"input.txt\",\n    {\n        \"param1\": np.linspace(0, 10, 50),    # 50 values\n        \"param2\": np.logspace(-3, 3, 20),    # 20 values\n        \"param3\": [0.1, 0.5, 1.0]            # 3 values\n    },  # Total: 50 \u00d7 20 \u00d7 3 = 3000 cases\n    model,\n    calculators=[\"sh://bash calc.sh\"] * 8  # 8 parallel workers\n)\n</code></pre>"},{"location":"user-guide/core-functions/fzr/#calculator-options","title":"Calculator Options","text":""},{"location":"user-guide/core-functions/fzr/#single-calculator","title":"Single Calculator","text":"<pre><code>results = fz.fzr(\n    \"input.txt\",\n    variables,\n    model,\n    calculators=\"sh://bash calculate.sh\"\n)\n</code></pre>"},{"location":"user-guide/core-functions/fzr/#multiple-calculators-parallel","title":"Multiple Calculators (Parallel)","text":"<pre><code>results = fz.fzr(\n    \"input.txt\",\n    variables,\n    model,\n    calculators=[\n        \"sh://bash calc.sh\",\n        \"sh://bash calc.sh\",\n        \"sh://bash calc.sh\",\n        \"sh://bash calc.sh\"\n    ]  # 4 parallel workers\n)\n</code></pre>"},{"location":"user-guide/core-functions/fzr/#failover-chain","title":"Failover Chain","text":"<pre><code>results = fz.fzr(\n    \"input.txt\",\n    variables,\n    model,\n    calculators=[\n        \"cache://previous_results\",        # Try cache\n        \"sh://bash fast_method.sh\",        # Fast method\n        \"sh://bash robust_method.sh\",      # Backup\n        \"ssh://user@hpc/bash remote.sh\"    # Remote fallback\n    ]\n)\n</code></pre>"},{"location":"user-guide/core-functions/fzr/#remote-execution","title":"Remote Execution","text":"<pre><code>results = fz.fzr(\n    \"input.txt\",\n    variables,\n    model,\n    calculators=\"ssh://user@server.com/bash /path/to/calculate.sh\"\n)\n</code></pre>"},{"location":"user-guide/core-functions/fzr/#model-options","title":"Model Options","text":""},{"location":"user-guide/core-functions/fzr/#dictionary-model","title":"Dictionary Model","text":"<pre><code>model = {\n    \"varprefix\": \"$\",\n    \"formulaprefix\": \"@\",\n    \"delim\": \"()\",\n    \"commentline\": \"#\",\n    \"output\": {\n        \"pressure\": \"grep 'P:' output.txt | awk '{print $2}'\",\n        \"temperature\": \"grep 'T:' output.txt | awk '{print $2}'\"\n    }\n}\n\nresults = fz.fzr(\"input.txt\", variables, model, calculators)\n</code></pre>"},{"location":"user-guide/core-functions/fzr/#model-alias","title":"Model Alias","text":"<p>Save model to <code>.fz/models/mymodel.json</code>:</p> <pre><code>{\n    \"varprefix\": \"$\",\n    \"output\": {\n        \"result\": \"cat output.txt\"\n    }\n}\n</code></pre> <p>Use by name:</p> <pre><code>results = fz.fzr(\"input.txt\", variables, \"mymodel\", calculators)\n</code></pre>"},{"location":"user-guide/core-functions/fzr/#results-analysis","title":"Results Analysis","text":""},{"location":"user-guide/core-functions/fzr/#basic-analysis","title":"Basic Analysis","text":"<pre><code>results = fz.fzr(...)\n\n# Summary statistics\nprint(results.describe())\n\n# Check for failures\nfailed = results[results['status'] != 'done']\nprint(f\"Failed: {len(failed)}\")\n\n# Group by variable\ngrouped = results.groupby('temperature').agg({\n    'pressure': ['mean', 'std', 'min', 'max']\n})\nprint(grouped)\n</code></pre>"},{"location":"user-guide/core-functions/fzr/#filtering-results","title":"Filtering Results","text":"<pre><code># Filter by condition\nhigh_pressure = results[results['pressure'] &gt; 1000]\n\n# Filter by multiple conditions\nsubset = results[\n    (results['temperature'] &gt; 300) &amp;\n    (results['pressure'] &lt; 2000)\n]\n\n# Filter by status\nsuccessful = results[results['status'] == 'done']\n</code></pre>"},{"location":"user-guide/core-functions/fzr/#visualization","title":"Visualization","text":"<pre><code>import matplotlib.pyplot as plt\n\n# Line plot\nfor temp in results['temperature'].unique():\n    data = results[results['temperature'] == temp]\n    plt.plot(data['pressure'], data['result'], label=f'T={temp}')\nplt.legend()\nplt.show()\n\n# Scatter plot\nplt.scatter(results['temperature'], results['pressure'], \n            c=results['result'], cmap='viridis')\nplt.colorbar(label='Result')\nplt.show()\n</code></pre>"},{"location":"user-guide/core-functions/fzr/#advanced-features","title":"Advanced Features","text":""},{"location":"user-guide/core-functions/fzr/#parallel-execution-control","title":"Parallel Execution Control","text":"<pre><code>import os\n\n# Set maximum workers\nos.environ['FZ_MAX_WORKERS'] = '16'\n\nresults = fz.fzr(\n    \"input.txt\",\n    large_variables,\n    model,\n    calculators=[\"sh://bash calc.sh\"] * 16\n)\n</code></pre>"},{"location":"user-guide/core-functions/fzr/#retry-configuration","title":"Retry Configuration","text":"<pre><code>import os\n\n# Set retry limit\nos.environ['FZ_MAX_RETRIES'] = '5'\n\nresults = fz.fzr(\n    \"input.txt\",\n    variables,\n    model,\n    calculators=[\n        \"sh://unreliable_method.sh\",\n        \"sh://backup_method.sh\"\n    ]\n)\n</code></pre>"},{"location":"user-guide/core-functions/fzr/#interrupt-handling","title":"Interrupt Handling","text":"<pre><code>try:\n    results = fz.fzr(\n        \"input.txt\",\n        {\"param\": list(range(1000))},\n        model,\n        calculators=\"sh://bash slow_calc.sh\"\n    )\nexcept KeyboardInterrupt:\n    print(\"Interrupted! Partial results saved.\")\n    # Resume with cache\n    results = fz.fzr(\n        \"input.txt\",\n        {\"param\": list(range(1000))},\n        model,\n        calculators=[\n            \"cache://results\",\n            \"sh://bash slow_calc.sh\"\n        ],\n        results_dir=\"results_resumed\"\n    )\n</code></pre>"},{"location":"user-guide/core-functions/fzr/#caching-strategy","title":"Caching Strategy","text":"<pre><code># First run\nresults1 = fz.fzr(\n    \"input.txt\",\n    {\"param\": [1, 2, 3, 4, 5]},\n    model,\n    calculators=\"sh://bash expensive.sh\",\n    results_dir=\"run1\"\n)\n\n# Extend with caching\nresults2 = fz.fzr(\n    \"input.txt\",\n    {\"param\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]},\n    model,\n    calculators=[\n        \"cache://run1\",              # Reuse 1-5\n        \"sh://bash expensive.sh\"     # Calculate 6-10\n    ],\n    results_dir=\"run2\"\n)\n</code></pre>"},{"location":"user-guide/core-functions/fzr/#output-directory-structure","title":"Output Directory Structure","text":"<pre><code>results/\n\u251c\u2500\u2500 param=1/\n\u2502   \u251c\u2500\u2500 input.txt          # Compiled input\n\u2502   \u251c\u2500\u2500 output.txt         # Calculation output\n\u2502   \u251c\u2500\u2500 log.txt            # Execution metadata\n\u2502   \u251c\u2500\u2500 out.txt            # Standard output\n\u2502   \u251c\u2500\u2500 err.txt            # Standard error\n\u2502   \u2514\u2500\u2500 .fz_hash           # File checksums\n\u251c\u2500\u2500 param=2/\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 param=3/\n    \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"user-guide/core-functions/fzr/#complete-examples","title":"Complete Examples","text":""},{"location":"user-guide/core-functions/fzr/#example-1-sensitivity-analysis","title":"Example 1: Sensitivity Analysis","text":"<pre><code>import fz\nimport numpy as np\n\nmodel = {\n    \"varprefix\": \"$\",\n    \"output\": {\n        \"result\": \"grep 'Result:' output.txt | awk '{print $2}'\"\n    }\n}\n\n# Vary one parameter at a time\nbaseline = {\"A\": 1.0, \"B\": 2.0, \"C\": 3.0}\n\nfor param in ['A', 'B', 'C']:\n    variables = baseline.copy()\n    variables[param] = np.linspace(0.5, 1.5, 20)\n\n    results = fz.fzr(\n        \"model.txt\",\n        variables,\n        model,\n        calculators=\"sh://bash simulate.sh\",\n        results_dir=f\"sensitivity_{param}\"\n    )\n\n    print(f\"Sensitivity to {param}:\")\n    print(results[[param, 'result']].corr())\n</code></pre>"},{"location":"user-guide/core-functions/fzr/#example-2-design-of-experiments","title":"Example 2: Design of Experiments","text":"<pre><code>import fz\nfrom itertools import combinations\n\nmodel = {\n    \"varprefix\": \"$\",\n    \"output\": {\"response\": \"cat response.txt\"}\n}\n\n# Full factorial\nvariables = {\n    \"factor1\": [-1, 0, 1],\n    \"factor2\": [-1, 0, 1],\n    \"factor3\": [-1, 0, 1]\n}\n\nresults = fz.fzr(\n    \"experiment.txt\",\n    variables,\n    model,\n    calculators=\"sh://bash run_experiment.sh\",\n    results_dir=\"doe_results\"\n)\n\n# Analyze main effects\nfor factor in ['factor1', 'factor2', 'factor3']:\n    effect = results.groupby(factor)['response'].mean()\n    print(f\"\\n{factor} effect:\")\n    print(effect)\n\n# Analyze interactions\nfor f1, f2 in combinations(['factor1', 'factor2', 'factor3'], 2):\n    interaction = results.groupby([f1, f2])['response'].mean()\n    print(f\"\\n{f1} \u00d7 {f2} interaction:\")\n    print(interaction)\n</code></pre>"},{"location":"user-guide/core-functions/fzr/#example-3-optimization-search","title":"Example 3: Optimization Search","text":"<pre><code>import fz\nimport numpy as np\n\nmodel = {\n    \"varprefix\": \"$\",\n    \"output\": {\"objective\": \"cat objective.txt\"}\n}\n\n# Initial grid search\nresults = fz.fzr(\n    \"optimize.txt\",\n    {\n        \"x\": np.linspace(-10, 10, 20),\n        \"y\": np.linspace(-10, 10, 20)\n    },\n    model,\n    calculators=\"sh://bash evaluate.sh\",\n    results_dir=\"grid_search\"\n)\n\n# Find best region\nbest = results.loc[results['objective'].idxmin()]\nprint(f\"Best found: x={best['x']}, y={best['y']}, obj={best['objective']}\")\n\n# Refine search around optimum\nresults2 = fz.fzr(\n    \"optimize.txt\",\n    {\n        \"x\": np.linspace(best['x']-1, best['x']+1, 20),\n        \"y\": np.linspace(best['y']-1, best['y']+1, 20)\n    },\n    model,\n    calculators=[\n        \"cache://grid_search\",\n        \"sh://bash evaluate.sh\"\n    ],\n    results_dir=\"refined_search\"\n)\n</code></pre>"},{"location":"user-guide/core-functions/fzr/#error-handling","title":"Error Handling","text":"<pre><code>import fz\n\ntry:\n    results = fz.fzr(\n        \"input.txt\",\n        variables,\n        model,\n        calculators=\"sh://bash calc.sh\"\n    )\nexcept FileNotFoundError:\n    print(\"Input file not found\")\nexcept ValueError as e:\n    print(f\"Invalid configuration: {e}\")\nexcept Exception as e:\n    print(f\"Unexpected error: {e}\")\n\n# Check results\nif 'status' in results.columns:\n    failures = results[results['status'] != 'done']\n    if len(failures) &gt; 0:\n        print(f\"\\nFailed cases: {len(failures)}\")\n        print(failures[['status', 'error']])\n</code></pre>"},{"location":"user-guide/core-functions/fzr/#performance-tips","title":"Performance Tips","text":"<ol> <li>Use caching for expensive calculations</li> <li>Parallelize with multiple calculators</li> <li>Batch similar cases for better locality</li> <li>Filter early to reduce data processing</li> <li>Save checkpoints for long runs</li> </ol>"},{"location":"user-guide/core-functions/fzr/#see-also","title":"See Also","text":"<ul> <li>fzi - Parse input variables</li> <li>fzc - Compile input files</li> <li>fzo - Parse output files</li> <li>Calculators - Calculator types</li> <li>Parallel Execution - Parallelization guide</li> </ul>"}]}